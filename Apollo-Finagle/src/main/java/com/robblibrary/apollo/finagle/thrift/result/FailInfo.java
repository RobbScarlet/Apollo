/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.robblibrary.apollo.finagle.thrift.result;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class FailInfo implements TBase<FailInfo, FailInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("FailInfo");

  private static final TField FAIL_CODE_FIELD_DESC = new TField("failCode", TType.I32, (short)1);
  private static final TField FAIL_NAME_FIELD_DESC = new TField("failName", TType.STRING, (short)2);
  private static final TField FAIL_DESC_FIELD_DESC = new TField("failDesc", TType.STRING, (short)3);


  public int failCode;
  public String failName;
  public String failDesc;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    FAIL_CODE((short)1, "failCode"),
    FAIL_NAME((short)2, "failName"),
    FAIL_DESC((short)3, "failDesc");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FAIL_CODE
  	return FAIL_CODE;
        case 2: // FAIL_NAME
  	return FAIL_NAME;
        case 3: // FAIL_DESC
  	return FAIL_DESC;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __FAILCODE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FAIL_CODE, new FieldMetaData("failCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.FAIL_NAME, new FieldMetaData("failName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FAIL_DESC, new FieldMetaData("failDesc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(FailInfo.class, metaDataMap);
  }


  public FailInfo() {
  }

  public FailInfo(
    int failCode,
    String failName,
    String failDesc)
  {
    this();
    this.failCode = failCode;
    setFailCodeIsSet(true);
    this.failName = failName;
    this.failDesc = failDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FailInfo(FailInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.failCode = other.failCode;
    if (other.isSetFailName()) {
      this.failName = other.failName;
    }
    if (other.isSetFailDesc()) {
      this.failDesc = other.failDesc;
    }
  }

  public FailInfo deepCopy() {
    return new FailInfo(this);
  }

  @Override
  public void clear() {
    setFailCodeIsSet(false);
    this.failCode = 0;
    this.failName = null;
    this.failDesc = null;
  }

  public int getFailCode() {
    return this.failCode;
  }

  public FailInfo setFailCode(int failCode) {
    this.failCode = failCode;
    setFailCodeIsSet(true);

    return this;
  }

  public void unsetFailCode() {
  __isset_bit_vector.clear(__FAILCODE_ISSET_ID);
  }

  /** Returns true if field failCode is set (has been asigned a value) and false otherwise */
  public boolean isSetFailCode() {
    return __isset_bit_vector.get(__FAILCODE_ISSET_ID);
  }

  public void setFailCodeIsSet(boolean value) {
    __isset_bit_vector.set(__FAILCODE_ISSET_ID, value);
  }

  public String getFailName() {
    return this.failName;
  }

  public FailInfo setFailName(String failName) {
    this.failName = failName;

    return this;
  }

  public void unsetFailName() {
    this.failName = null;
  }

  /** Returns true if field failName is set (has been asigned a value) and false otherwise */
  public boolean isSetFailName() {
    return this.failName != null;
  }

  public void setFailNameIsSet(boolean value) {
    if (!value) {
      this.failName = null;
    }
  }

  public String getFailDesc() {
    return this.failDesc;
  }

  public FailInfo setFailDesc(String failDesc) {
    this.failDesc = failDesc;

    return this;
  }

  public void unsetFailDesc() {
    this.failDesc = null;
  }

  /** Returns true if field failDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetFailDesc() {
    return this.failDesc != null;
  }

  public void setFailDescIsSet(boolean value) {
    if (!value) {
      this.failDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FAIL_CODE:
      if (value == null) {
        unsetFailCode();
      } else {
        setFailCode((Integer)value);
      }
      break;
    case FAIL_NAME:
      if (value == null) {
        unsetFailName();
      } else {
        setFailName((String)value);
      }
      break;
    case FAIL_DESC:
      if (value == null) {
        unsetFailDesc();
      } else {
        setFailDesc((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FAIL_CODE:
      return new Integer(getFailCode());
    case FAIL_NAME:
      return getFailName();
    case FAIL_DESC:
      return getFailDesc();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FAIL_CODE:
      return isSetFailCode();
    case FAIL_NAME:
      return isSetFailName();
    case FAIL_DESC:
      return isSetFailDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FailInfo)
      return this.equals((FailInfo)that);
    return false;
  }

  public boolean equals(FailInfo that) {
    if (that == null)
      return false;
    boolean this_present_failCode = true;
    boolean that_present_failCode = true;
    if (this_present_failCode || that_present_failCode) {
      if (!(this_present_failCode && that_present_failCode))
        return false;
      if (this.failCode != that.failCode)
        return false;
    }
    boolean this_present_failName = true && this.isSetFailName();
    boolean that_present_failName = true && that.isSetFailName();
    if (this_present_failName || that_present_failName) {
      if (!(this_present_failName && that_present_failName))
        return false;
      if (!this.failName.equals(that.failName))
        return false;
    }
    boolean this_present_failDesc = true && this.isSetFailDesc();
    boolean that_present_failDesc = true && that.isSetFailDesc();
    if (this_present_failDesc || that_present_failDesc) {
      if (!(this_present_failDesc && that_present_failDesc))
        return false;
      if (!this.failDesc.equals(that.failDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_failCode = true;
    builder.append(present_failCode);
    if (present_failCode)
      builder.append(failCode);
    boolean present_failName = true && (isSetFailName());
    builder.append(present_failName);
    if (present_failName)
      builder.append(failName);
    boolean present_failDesc = true && (isSetFailDesc());
    builder.append(present_failDesc);
    if (present_failDesc)
      builder.append(failDesc);
    return builder.toHashCode();
  }

  public int compareTo(FailInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FailInfo typedOther = (FailInfo)other;

    lastComparison = Boolean.valueOf(isSetFailCode()).compareTo(typedOther.isSetFailCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailCode()) {
      lastComparison = TBaseHelper.compareTo(this.failCode, typedOther.failCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailName()).compareTo(typedOther.isSetFailName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailName()) {
      lastComparison = TBaseHelper.compareTo(this.failName, typedOther.failName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailDesc()).compareTo(typedOther.isSetFailDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailDesc()) {
      lastComparison = TBaseHelper.compareTo(this.failDesc, typedOther.failDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // FAIL_CODE
          if (field.type == TType.I32) {
            this.failCode = iprot.readI32();
            setFailCodeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FAIL_NAME
          if (field.type == TType.STRING) {
            this.failName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FAIL_DESC
          if (field.type == TType.STRING) {
            this.failDesc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(FAIL_CODE_FIELD_DESC);
    oprot.writeI32(this.failCode);
    oprot.writeFieldEnd();
    if (this.failName != null) {
      oprot.writeFieldBegin(FAIL_NAME_FIELD_DESC);
      oprot.writeString(this.failName);
      oprot.writeFieldEnd();
    }
    if (this.failDesc != null) {
      oprot.writeFieldBegin(FAIL_DESC_FIELD_DESC);
      oprot.writeString(this.failDesc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FailInfo(");
    boolean first = true;
    sb.append("failCode:");
    sb.append(this.failCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failName:");
    if (this.failName == null) {
      sb.append("null");
    } else {
      sb.append(this.failName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failDesc:");
    if (this.failDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.failDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

